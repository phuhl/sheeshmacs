
;; recursively find .org files in provided directory
;; modified from an Emacs Lisp Intro example
(defun sa-find-org-file-recursively (&optional directory filext)
  "Return .org and .org_archive files recursively from DIRECTORY.
If FILEXT is provided, return files with extension FILEXT instead."
  (interactive "DDirectory: ")
  (let* (org-file-list
   (case-fold-search t)       ; filesystems are case sensitive
   (file-name-regex "^[^.#].*") ; exclude dot, autosave, and backup files
   (filext (or filext "org$\\\|"))
   (fileregex (format "%s\\.\\(%s$\\)" file-name-regex filext))
   (cur-dir-list (directory-files directory t file-name-regex)))
    ;; loop over directory listing
    (dolist (file-or-dir cur-dir-list org-file-list) ; returns org-file-list
      (cond
       ((file-regular-p file-or-dir) ; regular files
  (if (string-match fileregex file-or-dir) ; org files
      (add-to-list 'org-file-list file-or-dir)))
       ((file-directory-p file-or-dir)
  (dolist (org-file (sa-find-org-file-recursively file-or-dir filext)
        org-file-list) ; add files found to result
    (add-to-list 'org-file-list org-file)))))))

(defun sort-org-file-list (list)
  "Sorts org file list by name with index.org files before other files
 in a folder"
  (sort list (lambda (a b)
               (string<
                (replace-regexp-in-string "index.org$" "" a)
                (replace-regexp-in-string "index.org$" "" b)))))

(defun show-org-file-list ()
  "Opens buffer that shows all .org and .org_archive files in the
 by the global variable org-base-dir specified directory and it's subdirectories."
  (interactive)
  (let ((my-buffer (get-buffer-create "*orgfiles listed*"))
        (orgfiles (list)))
    (setq orgfiles
          (append (sort-org-file-list (sa-find-org-file-recursively org-base-dir))))
    (switch-to-buffer my-buffer)
    (erase-buffer)
    (org-mode)
    (org-file-list-mode)
    (insert (mapconcat #'(lambda (x)
                           (concat "[["
                                   x
                                   "]["
                                   (replace-regexp-in-string
                                    ".org$" ""
                                    (cl-subseq x (length org-base-dir)))
                                   "]]"))
                       orgfiles "\n"))
    (goto-char 0)
    (isearch-forward)
    (message "Orgfiles")))





(define-minor-mode org-file-list-mode
  "Minor Mode for viewing the org-filelist generated by show-org-file-list"
  :init-value nil
  :keymap
  '(
    ((kbd "q")
     . (lambda ()
         (interactive)
         (kill-buffer (current-buffer))))
    ((kbd "o")
     . (lambda ()
         (interactive)
         (org-open-at-point)
         (kill-buffer (current-buffer))))))
(defvar org-file-list-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "<return>") '(lambda ()
         (interactive)
         (org-open-at-point)
         (kill-buffer (current-buffer))))
    (define-key map (kbd "C-g") '(lambda ()
         (interactive)
         (kill-buffer (current-buffer))))
    map))
(add-to-list 'minor-mode-map-alist `(org-file-list-mode . ,org-file-list-map) t)

(defun run-agenda-with-agenda-files (pre)
  (interactive "P")
  (progn
    (setq org-agenda-files
          (sa-find-org-file-recursively org-base-dir))
    (org-agenda-list-priv pre)))



(defun run-todo-with-agenda-files (pre)
  (interactive "P")
  (progn
    (setq org-agenda-files
          (sa-find-org-file-recursively org-base-dir))
    (org-todo-list pre)))
