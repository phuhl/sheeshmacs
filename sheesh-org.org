#+TITLE: Sheesh-Org Config
#+DATE: [2020-12-10 Thu]
#+AUTHOR: Philipp Uhl

* Appearance

#+BEGIN_SRC emacs-lisp
   ;; Indents all content according to the corresponding headline. Has
   ;; slight issues with scrolling the buffer horizontally sometimes, is
   ;; it worth it in terms of estetics anyways (my opinion).
   ;; Seems to not be nessecary anymore since the use of
   ;; org-beautify-theme (EDIT: untrue?!)
   (setq org-startup-indented t)

   ;; langauge of timestamps
   (setq system-time-locale "C")

   ;; Sets image width to 300px if no #+ATTR_HTML: :width ..px is found
   (setq org-image-actual-width '(300))

   ;; Makes ord-mode inline all images by default
   (setq org-startup-with-inline-images t)

   ;; Make markup span up to 3 lines. "That variable is a list, the fifth
   ;; element of which says how many newlines the emphasis markers will
   ;; allow." - https://emacs-orgmode.gnu.narkive.com/4tkVxjr1/o-markup-blod-for-instance-over-line-breaks#post5
   (setf (nth 4 org-emphasis-regexp-components) 3)

   (add-hook 'org-mode-hook
             (lambda ()
               ;; Don't wrap long lines and wrap them at words if you wrap (whut?)
               (setq truncate-lines t)
               (setq word-wrap t)
               (global-whitespace-mode 0)
               ))
#+END_SRC
** Code block fontification

The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

** Lists with unicode bullets

#+begin_src emacs-lisp
    (use-package org
      :init
      (progn
      (font-lock-add-keywords 'org-mode
       '(("^ +\\([*]\\) "
              (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "‚ó¶"))))))
      (font-lock-add-keywords 'org-mode
       '(("^ *\\([+]\\) "
          (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "‚úß"))))))
      (font-lock-add-keywords 'org-mode
       '(("^ *\\([-]\\) "
          (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "‚Ä¢"))))))))
#+end_src

** Org-Bullets Mode

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :init (add-hook 'org-mode-hook 'org-bullets-mode)
    :config (setq org-bullets-bullet-list (quote ("‚óè" "‚óé" "‚óã" "‚ñ†" "‚ñ°" "‚óÜ" "‚óá"))))
#+end_src

** Clock-information

https://gist.github.com/rougier/baaf4ff6e0461680e3f070c5c32b64a2

#+BEGIN_SRC emacs-lisp

;  (defun sheesh-enhanced-message (orig-fun &rest args)
;    "This enhanced message displays a regular message in the echo area
;     and adds a specific text on the right part of the echo area. This
;     is to be used as an advice."
;    (when (and (boundp 'org-clock-current-task) org-clock-current-task)
;      (let* ((msg (if (car args) (apply 'format-message args) ""))
;             ;; Hack: The space for the split is a thin space, not a regular space
;             ;; This way, we get rid of the added part if present (unless an actual
;             ;; message uses a thin space.
;             (msg (car (split-string msg "‚Äâ")))
;             (msg (string-trim msg))
;             (left msg)
;             (right (propertize
;                     ;; Hack: The first space is a thin space, not a regular space
;                     (format "%s (in %s)"
;                             (truncate-string-to-width org-clock-current-task
;                                                       8 nil nil "‚Ä¶")
;                             (truncate-string-to-width
;                              (buffer-name (marker-buffer org-clock-marker))
;                              10 nil nil "‚Ä¶"))
;                     'face '(:height 0.85
;                                     :overline t
;                                     :inherit face-salient)))
;             (width (- (frame-width) (length right) -0))
;             (right (if (< width 0) "" right))
;             (width (if (< width 0) 0 width))
;             (full (format (format "%%-%ds %%s" width) left right)))
;        (if (active-minibuffer-window)
;            ;; Regular log and display when minibuffer is active
;            (apply orig-fun args)
;          (progn
;            ;; Log actual message without echo
;            (if message-log-max
;                (let ((inhibit-message t)) (apply orig-fun (list msg))))
;            ;; Display enhanced message without log
;            (let ((message-truncate-lines t) (message-log-max nil))
;              (apply orig-fun (list full)))
;            ;; Set current message explicitely
;            (setq current-message msg))))))
;
;  (advice-add 'message :around #'sheesh-enhanced-message)
;  (add-hook 'post-command-hook (lambda () (let ((message-log-max nil))
;                                            (message (current-message)))))
#+END_SRC

** Emojis üç≥

#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t)
  (add-hook 'org-mode-hook
            (lambda ()
              (emojify-mode)))
#+END_SRC

* Behavior

#+BEGIN_SRC emacs-lisp
  ;; Enforces that you can not set an entry to DONE if it has children with TODO
  (setq org-enforce-todo-dependencies t)

  ;; Enforces that you can not set an entry to DONE if it has unchecked
  ;; checkboxes, quite annoying.
  ;;  (setq org-enforce-todo-checkbox-dependencies t)

  ;; sets the time (minutes) until the org clock asks if the time should be kept
  (setq org-clock-idle-time 15)

  ;; Sets the default values for effort estimates
  (setq org-global-properties
        '(("Effort_ALL" . "0 0:10 0:20 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00")))
  ;;                        | |    |    |    |    |    |    |    |    |
  ;; Shortcuts              1 2    3    4    5    6    7    8    9    10

  ;; Sets default clock report table properties
  (setq org-clock-clocktable-default-properties
        '(:maxlevel 10 :scope tree :properties ("Effort") :compact t))
#+END_SRC

Disabling some commands that are confusing or destructive:
#+BEGIN_SRC emacs-lisp
(put 'org-kill-note-or-show-branches 'disabled t)
#+END_SRC

** Org mode specific hydra

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-org-mode (:hint nil :color blue)
    "Org"
    ("I" org-screenshot "Insert Screenshot from Clipboard" :column "Edit")
    ("*" org-wrap-bold "Make bold")
    ("/" org-wrap-italic "Make italic")
    ("=" org-wrap-code "Make code")
    ("_" org-wrap-underline "Make underline")

    ("c" ox-clip-formatted-copy "Copy formated" :column "Export/Import")

    ("i" org-toggle-inline-images "Toggle inline images" :column "Display")
    ("n" org-toggle-narrow-to-subtree "Toggle narrow subtree")

    ("S" org-table-shrink-to-row-width "Shrink to current row width" :column "Table")
    ("s" org-table-shrink "Shrink")
    ("M-s" org-table-expand "Expand")
    ("C-c TAB" org-table-toggle-column-width))
#+END_SRC

** Keybindings

#+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook
              (lambda ()
                (local-set-key (my-key "_Org Mode_ - Go to next heading")
                               'outline-next-visible-heading)
                (local-set-key (my-key "_Org Mode_ - Go to previous heading")
                               'outline-previous-visible-heading)
                (local-set-key (my-key "_Org Mode_ - Go one heading up")
                               'outline-up-heading)
                (local-set-key (my-key "_Org Mode_ - Copy table region")
                               'org-table-copy-region)
                (local-set-key (my-key "_Org Mode_ - Past rectangle")
                               'org-table-paste-rectangle)
                (local-set-key (my-key "_Org Mode_ - Sort table lines")
                               'org-table-sort-lines)
                (local-set-key (my-key "_Org Mode_ - Move current subtree to archive")
                               'org-advertized-archive-subtree)
                (local-set-key (my-key "_Org Mode_ - Insert screenshot")
                               'org-screenshot)
                (local-set-key (my-key "_Org Mode_ - Show all TODOs")
                               'run-todo-with-agenda-files)
                (local-set-key (my-key "_Org Mode_ - Show agenda")
                               'run-agenda-with-agenda-files)
                (local-set-key (my-key "_Org Mode_ - Create Schedule")
                               'org-schedule-effort-new)
                (local-set-key (my-key "Go to previous buffer")
                               'previous-multiframe-window)
                (local-set-key (kbd "C-;") nil)
                (local-set-key (kbd "C-,") nil)
                (local-set-key (my-key "Mode hydra") 'hydra-org-mode/body)))
    (define-key global-map (my-key "_Org Mode_ - Org capture") 'org-capture)
#+END_SRC
** Behavior of Todo with lists

Switches entry to DONE when all subentries are done, but only if cooky ([/]) is in headline

#+BEGIN_SRC emacs-lisp
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC

** Speed keys

Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the =org-speed-commands-default= variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to `=org-babel-describe-bindings=') will
display a list of the code blocks commands and their related keys.

#+BEGIN_SRC emacs-lisp
  (setq org-use-speed-commands t)
#+END_SRC

** Code blocks

This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
`=org-babel-load-languages=' variable, or with an elisp form like the
one below.  The customize interface of `=org-babel-load-languages='
contains an up to date list of the currently supported languages.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (sql . t)
     (restclient . t)
     (plantuml . t)
     (js . t)
     (python . t)
     ))
#+END_SRC

Disables confirmation for code evaluation in org-mode. Might be risky
when executing org-files from unknown sources.
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

Reloads images if neccessary after the execution of a code-block
#+BEGIN_SRC emacs-lisp
  (defun  shk-fix-inline-images ()
    (when org-inline-image-overlays
      (org-redisplay-inline-images)))

  (eval-after-load 'org
                 (add-hook 'org-babel-after-execute-hook
                           'shk-fix-inline-images))
#+END_SRC

Fix issue with javascript output due to depricated use of "sys"
package, might be fixed some day?
#+BEGIN_SRC emacs-lisp
(setq org-babel-js-function-wrapper
      "process.stdout.write(require('util').inspect(function(){\n%s\n}(), { maxArrayLength: null, maxStringLength: null, breakLength: Infinity, compact: true }))")
#+END_SRC

*** Plantuml
Setting the plantuml.jar

#+BEGIN_SRC emacs-lisp
  (if (boundp 'plantuml-dir)
      (setq org-plantuml-jar-path
            (expand-file-name plantuml-dir)))
#+END_SRC

*** Execute Code Blocks Asynchronously

[[https://github.com/astahlman/ob-async][{github} ob-async]]

Usage: add =:async= to the babel properties of the code block.

#+BEGIN_SRC emacs-lisp
;  (use-package ob-async
;    :ensure t)
#+END_SRC

** Exporting

HTLM export with CSS

#+BEGIN_SRC emacs-lisp
(setq org-export-htmlize-output-type 'css)
#+END_SRC

** Publishing

#+BEGIN_SRC emacs-lisp
  (use-package ox-publish
    :defer t
    :config
    (setq org-publish-project-alist
          `(
            ("org-notes"
             :base-directory ,org-base-dir
             :base-extension "org"
             :publishing-directory ,org-exp-dir
             :recursive t
             :publishing-function org-html-publish-to-html
             :headline-levels 5             ; Just the default for this project.
             :auto-preamble t
             :auto-sitemap t                ; Generate sitemap.org automagically...
             :sitemap-filename "sitemap.org"  ; ... call it sitemap.org (it's the default)...
             :sitemap-title ""         ; ... with title 'Sitemap'.
             )
            ("org-static"
             :base-directory ,org-base-dir
             :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
             :publishing-directory ,org-exp-dir
             :recursive t
             :publishing-function org-publish-attachment
             )
            ("org" :components ("org-notes" "org-static"))
            ))
    )
#+END_SRC

** Tables

*** Set table widths to header width

#+BEGIN_SRC emacs-lisp
  (defun org-table-shrink-to-row-width ()
    "Shrinks the table to the width of the current row. Each column is
  set to the width of the respective cell in the current row."
    (interactive)
    (save-excursion
      (let ((beg (org-table-begin))
            (widths nil))

        (org-table-with-shrunk-columns
         (let* ((my-row (- (org-table-current-line) 1))
                (table (org-table-to-lisp))
                (rows (remq 'hline table))
                (row (nth my-row rows)))
           (setq columns-number (apply #'max (mapcar #'length rows)))
           (dotimes (i columns-number)
             (let ((max-width 1))
               (let ((cell (or (nth i row) "")))
                 (setq max-width (max max-width (org-string-width cell))))
               (push max-width widths)))))
        (setq widths (nreverse widths))
        (goto-char beg)
        (let ((columns-count (length widths))
              (new-row ""))
          (dotimes (i columns-count)
            (setq new-row (concat new-row "|" "<" (number-to-string (+ 1 (nth i widths))) ">"))
            ;; (when (>= (nth i widths) max-width)
            ;;   (insert (concat "<" (number-to-string max-width) ">")))
            )
          (insert (concat new-row "|" "\n"))))
      (org-table-align)
      (org-table-shrink)))
#+END_SRC

** Formatting

#+BEGIN_SRC emacs-lisp
  (defun org-wrap-in (char)
    (let (p1 p2)
      (if (use-region-p)
          (setq p1 (region-beginning) p2 (region-end))
        (setq p1 (point) p2 (point)))
      (goto-char p2)
      (insert char)
      (goto-char p1)
      (insert char)
      (goto-char p2)
      (forward-char 1)))

  (defun org-wrap-bold ()
    (interactive)
    (org-wrap-in "*"))

  (defun org-wrap-italic ()
    (interactive)
    (org-wrap-in "/"))

  (defun org-wrap-code ()
    (interactive)
    (org-wrap-in "="))

  (defun org-wrap-underline ()
    (interactive)
    (org-wrap-in "_"))
#+END_SRC
* Features
** Schedule Effort

This helper function behaves lake the normal =org-schedule= function,
but if an estimate is set, it will (if a start hour is present in the
schedule) add a corresponding end-hour.

#+BEGIN_SRC emacs-lisp
  (defun org-schedule-effort ()
  (interactive)
    (save-excursion
      (org-back-to-heading t)
      (let* (
          (element (org-element-at-point))
          (effort (org-element-property :EFFORT element))
          (scheduled (org-element-property :scheduled element))
          (ts-year-start (org-element-property :year-start scheduled))
          (ts-month-start (org-element-property :month-start scheduled))
          (ts-day-start (org-element-property :day-start scheduled))
          (ts-hour-start (org-element-property :hour-start scheduled))
          (ts-minute-start (org-element-property :minute-start scheduled)) )
        (if (and (not (eq scheduled nil))
                 (not (eq effort nil))
                 (not (eq ts-hour-start nil)))
            (org-schedule nil (concat
                               (format "%s" ts-year-start)
                               "-"
                               (if (< ts-month-start 10)
                                   (concat "0" (format "%s" ts-month-start))
                                 (format "%s" ts-month-start))
                               "-"
                               (if (< ts-day-start 10)
                                   (concat "0" (format "%s" ts-day-start))
                                 (format "%s" ts-day-start))
                               " "
                               (if (< ts-hour-start 10)
                                   (concat "0" (format "%s" ts-hour-start))
                                 (format "%s" ts-hour-start))
                               ":"
                               (if (< ts-minute-start 10)
                                   (concat "0" (format "%s" ts-minute-start))
                                 (format "%s" ts-minute-start))
                               "+"
                               effort)) ))))

  (defun org-schedule-effort-new ()
    (interactive)
    (call-interactively 'org-schedule)
    (org-schedule-effort)
    )
#+END_SRC

** SFW Agenda

#+BEGIN_SRC emacs-lisp
  (defun org-agenda-list-priv (pre)
    "Opens the org-agenda, if called with a prefix argument all
  priv-tags will be filtered out (if #+TAGS: priv(p) set somewhere"
    (interactive "P")
    (if pre
        (progn
          (org-agenda-list)
          (org-agenda-filter-by-tag t ?p))
      (org-agenda-list)))
#+END_SRC

** Screenshots

#+BEGIN_SRC emacs-lisp
  ;; Past images from clipboard into org-mode
  (defun org-screenshot ()
    "Take a screenshot into a time stamped unique-named file in the same
  directory as the org-buffer and insert
  a link to this file."
    (interactive)
    (insert (concat "[[file:" (save-screenshot) "]]"))
    (org-display-inline-images))
#+END_SRC

** Capture

#+BEGIN_SRC emacs-lisp
  (defvar my/org-basic-task-template "* TODO %^{Task}
  :PROPERTIES:
  :Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}
  :END:
  %<%Y-%m-%d %H:%M> %?
  " "Basic task data")

  (setq org-default-notes-file "~/org/notes.org")
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))

  (setq org-capture-templates
        `(("t" "Tasks" entry
           (file+headline "~/org/notes.org" "Tasks")
           ,my/org-basic-task-template)
          ("k" "Key Binding" table-line
           (file "~/org/notes.org") "| | | |")
          ))
#+END_SRC

** Quick jump to Org-file overview

#+BEGIN_SRC emacs-lisp
  (eval
   `(use-package get-org-buffer-list
      :load-path "src"
      :bind
      (,(cons (my-bind "_Org Mode_ - Quick jump to Org-file") 'show-org-file-list)
       ,(cons (my-bind "_Org Mode_ - Show agenda") 'run-agenda-with-agenda-files)
       ,(cons (my-bind "_Org Mode_ - Show all TODOs") 'run-todo-with-agenda-files))))
#+END_SRC

** Insert Week of Calendar

#+BEGIN_SRC emacs-lisp
  (defun kw-insert ()
    (interactive)
    (insert (concat "* KW "
                    (number-to-string
                     (+ 1 (string-to-number (format-time-string "%W"))))
                    "\n\n** Montag\n\n** Dienstag\n\n** Mittwoch\n\n** Donnerstag\n\n** Freitag"
                    )))
#+END_SRC

** Ox-Clip: Formatted copy/paste

On Wayland: Requires a script "ox-clip" to be in the path:

#+CAPTION: ox-clip
#+BEGIN_SRC sh
#!/bin/bash

wl-copy -t text/html < "$1"
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ox-clip :ensure t
    :config
    (if (eq (detect-os-display-type) 'wayland)
        (setq ox-clip-linux-cmd "ox-clip \"%f\"")))
#+END_SRC

From the documentation:

#+BEGIN_EXAMPLE
The main command is `ox-clip-formatted-copy' that should work across
Windows, Mac and Linux. By default, it copies as html.

Note: Images/equations may not copy well in html. Use `ox-clip-image-to-clipboard' to
copy the image or latex equation at point to the clipboard as an image. The
default latex scale is too small for me, so the default size for this is set
to 3 in `ox-clip-default-latex-scale'. This overrides the settings in
`org-format-latex-options'.
#+END_EXAMPLE
